"""
Django settings for party_data_management_ms project.

Generated by 'django-admin startproject' using Django 2.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""
from kombu import Exchange, Queue
import os
from decouple import config, Csv

from corsheaders.defaults import default_headers

from jsa_utils.settings import *


# Application definition
CUSTOM_INSTALLED_APPS = [
    "django_jenkins",
    "party_base",
    "auditlog",
    "rest_framework",
    "django_extensions",
    "drf_yasg",
    "django_celery_results",
    "django_fsm",
]

INSTALLED_APPS = INSTALLED_APPS + CUSTOM_INSTALLED_APPS

GRAPH_MODELS = {
    "all_applications": True,
    "group_models": True,
}

PROJECT_APPS = [
    "party_base",
]

JENKINS_TASKS = ["django_jenkins.tasks.run_pep8", "django_jenkins.tasks.run_pyflakes"]

CUSTOM_MIDDLEWARE = [
    "jsa_auth_middleware.JSAMiddleware",
]

MIDDLEWARE = MIDDLEWARE + CUSTOM_MIDDLEWARE

ROOT_URLCONF = "party_data_management_ms.urls"


WSGI_APPLICATION = "party_data_management_ms.wsgi.application"

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

SERVICE_BASE_URL = os.environ.get("SERVICE_BASE_URL", config("SERVICE_BASE_URL", "-"))
AUTH_BASE_URL = os.environ.get("AUTH_BASE_URL", config("AUTH_BASE_URL", "-"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", config("SECRET_KEY", "-"))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.environ.get("DEBUG", config("DEBUG", True)))

ALLOWED_HOSTS = str(
    os.environ.get("ALLOWED_HOSTS", config("ALLOWED_HOSTS", "localhost,127.0.0.1"))
).split(",")

# CORS_ALLOWED_ORIGINS = tuple(
#     link.strip()
#     for link in os.environ.get(
#         "CORS_WHITELIST", config("CORS_WHITELIST", "http://localhost:8080")
#     ).split(",")
# )

CORS_ALLOW_ALL_ORIGINS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = list(default_headers) + [
    'Authorization',
    'If-Modified-Since',
    'Cache-Control',
    'Range',
    'Content-Disposition',
]

CORS_EXPOSE_HEADERS = [
    'Authorization',
    'authorization',
    'content-type',
]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# Email Settings
EMAIL_HOST = os.environ.get("EMAIL_HOST", config("EMAIL_HOST", "-"))
EMAIL_PORT = int(os.environ.get("EMAIL_PORT", config("EMAIL_PORT", "000")))
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", config("EMAIL_HOST_USER", "-"))
EMAIL_HOST_PASSWORD = os.environ.get(
    "EMAIL_HOST_PASSWORD", config("EMAIL_HOST_PASSWORD", "-")
)

DEFAULT_FROM_EMAIL = os.environ.get(
    "DEFAULT_FROM_EMAIL", config("DEFAULT_FROM_EMAIL", "-")
)

STATIC_ROOT = os.path.join(BASE_DIR, "static/")

MESSAGING_USERNAME = os.environ.get(
    "MESSAGING_USERNAME", config("MESSAGING_USERNAME", "-")
)
MESSAGING_PWORD = os.environ.get("MESSAGING_PWORD", config("MESSAGING_PWORD", "-"))
BROKER_IP = os.environ.get("BROKER_IP", config("BROKER_IP", "-"))
BROKER_PORT = os.environ.get("BROKER_PORT", config("BROKER_PORT", "-"))
BROKER_VHOST = os.environ.get("BROKER_VHOST", config("BROKER_VHOST", "-"))
CELERY_BROKER_URL = "amqp://{}:{}@{}:{}/{}".format(
    MESSAGING_USERNAME, MESSAGING_PWORD, BROKER_IP, BROKER_PORT, BROKER_VHOST
)

APPLICATION_ID = os.environ.get("APPLICATION_ID", config("APPLICATION_ID", "-"))
CELERY_TASK_QUEUES = (
    Queue(
        str(APPLICATION_ID).upper() + "_INBOX",
        Exchange("JETSTREAM_DX"),
        routing_key=APPLICATION_ID + "_inbox",
    ),
)

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "USER": os.environ.get("DB_USER", config("DB_USER", default="dummyUser")),
        "PASSWORD": os.environ.get(
            "DB_PASSWORD", config("DB_PASSWORD", default="dummyPassword")
        ),
        "HOST": os.environ.get("DB_HOST", config("DB_HOST", default="localhost")),
        "PORT": os.environ.get("DB_PORT", config("DB_PORT", default="5432", cast=int)),
        "NAME": os.environ.get("DB_NAME", config("DB_NAME", default="dummyDB")),
    }
}


JSA_AUTH_MIDDLEWARE_CONFIG = {
    "IGNORE_URLS": (
        "/api/initialize-signup-form/",
        "/api/fetch-cities/",
        "/api/client-lookup/",
        "/api/get_account_details_byID/",
        "/api/get_account_details_byEmail/",
        "/api/verifyAccountId/",
    ),
    "IGNORE_STARTSWITH_URLS": ("/api/accounts/signup/",),
}

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# CELERY BROKER SETTINGS
EVENT_SUBSCRIPTIONS = [
    {
        "topic": "accounts.userprofile.setup",
        "description": "Auth-User profile setup event",
    },
]


PRICE_QUOTE_URL = os.environ.get(
    "PRICE_QUOTE_URL", config("PRICE_QUOTE_URL", "http://www.google.com")
)
TRAKIT_URL = config("TRAKIT_URL")

# SLACK SETTINGS
ENQUIRIES_SLACK_CHANNEL = os.environ.get(
    "ENQUIRIES_SLACK_CHANNEL", config("ENQUIRIES_SLACK_CHANNEL", "-")
)
ENQUIRY_ICON = os.environ.get("ENQUIRY_ICON", config("ENQUIRY_ICON", "-"))
